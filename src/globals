# /usr/lib/networks/globals
#
# any +x files in /usr/lib/network/hooks and /etc/network.d/hooks
# will be sourced when this file is.
# hook files can override any of the utility functions defined here for custom behavior
# (such as logging error messages to syslog)
# this lets us keep netcfg simple but gives it the flexibility for users
# to make modular use of it to do more complex things


### Globals
PROFILE_DIR="/etc/network.d/"
HOOKS_DIR="/usr/lib/network/hooks/"
USERHOOKS_DIR="$PROFILE_DIR/hooks/"
IFACE_DIR="$PROFILE/interfaces/"
SUBR_DIR="/usr/lib/network/"
CONN_DIR="${SUBR_DIR}/connections/"
STATE_DIR="/var/run/network/"



### Logging/Error reporting
#

function report_err {
    echo "$*"
}

function report_warn {
    echo "$*"
}

function report_notify {
	true
}

function report_debug {
	checkyesno "$NETCFG_DEBUG" && echo "DEBUG: $*"
}

function report_try {
	# JP: this needs -n option
    echo -n ":: $*"
    REPORT_TRYING=1
}

function report_fail {
    if [[ -n "$*" ]]; then
        if [[ -n "$REPORT_TRYING" ]]; then
			# JP: this needs -n option
            echo -n "- $*"
            REPORT_TRYING=
            echo "[fail]"
        else
            echo "$*"
        fi
    elif [[ -n "$REPORT_TRYING" ]]; then
        REPORT_TRYING=
        echo "[fail]"
    fi
}

function report_success {
    if [[ -n "$*" ]]; then
		# JP: this needs -n option
        echo -n "- $*"
		REPORT_TRYING=
    fi
    echo "[done]"
}

### For calling scripts only; don't use in library functions
function exit_stderr { echo "$*" >&2; exit 1; }
function exit_err { report_err "$*"; exit 1; }
function exit_fail { report_fail "$*"; exit 1; }


### From FreeBSD's /etc/rc.subr
##
# checkyesno var
#    Test $1 variable, and warn if not set to YES or NO.
#    Return 0 if it's "yes" (et al), nonzero otherwise.
#    to make default yes, do "checkyesno ${VAR:-yes}"
#
checkyesno()
{
    local _value="$1"
    #debug "checkyesno: $1 is set to $_value."
    case "$_value" in

        #    "yes", "true", "on", or "1"
    [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1)
        return 0
        ;;

        #    "no", "false", "off", or "0"
    [Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0)
        return 1
        ;;
    *)
        #warn "\$${1} is not set properly - see ${rcvar_manpage}."
        return 1
        ;;
    esac
}



function load_hooks() {
	### Load any +x files in $HOOKS_DIR and $USERHOOKS_DIR
	local hook
	for hook in $(find -L "$HOOKS_DIR/" "$USERHOOKS_DIR/$hook" -maxdepth 1 -type f -executable -printf '%P\n' | sort -u); do
		# if there's an executable hook of this name in USERHOOKS_DIR, we only load it
		if [ -x "$USERHOOKS_DIR/$hook" ]; then
			source "$USERHOOKS_DIR/$hook"
		else
			source "$HOOKS_DIR/$hook"
		fi
	done
}

load_hooks


