#! /usr/bin/env python
import sys
import dbus
import shlex
import subprocess
from signal import SIGTERM
from os import kill
from time import sleep

# dbus constants.
WPAS_DBUS_SERVICE = "fi.epitest.hostap.WPASupplicant"
WPAS_DBUS_INTERFACE = "fi.epitest.hostap.WPASupplicant"
WPAS_DBUS_OPATH = "/fi/epitest/hostap/WPASupplicant"

WPAS_DBUS_INTERFACES_INTERFACE = "fi.epitest.hostap.WPASupplicant.Interface"
WPAS_DBUS_INTERFACES_OPATH = "/fi/epitest/hostap/WPASupplicant/Interfaces"
WPAS_DBUS_BSSID_INTERFACE = "fi.epitest.hostap.WPASupplicant.BSSID"
WPAS_DBUS_NETWORKS_INTERFACE = "fi.epitest.hostap.WPASupplicant.Network"

def read_config(config):
    cfg = shlex.split(open(config, "r").read())
    options = {}
    for line in cfg:
        (var, delim, value) = line.partition('=')  
        if delim and var.lstrip()[0] != "#":
            options[var] = value
    return options


def wep_hex2dec(key):
    if len(key) not in [10, 26]:
        print "Bad key"
        raise SyntaxError
    
    x=0
    new_key=[]
    while x<len(key):
        new_key.append(str(int(key[x:x+2],16)).zfill(3))
        # Convert hex pair to decimal
        #part = int(key[x:x+2],16)
        # Convert to string with 00's filled and append
        #new_key+=str(part).zfill(3)
        # Increment to get next pair
        x+=2

    return new_key

def start(profile):
    # TODO: Add check if it's even a wireless interface
    # Interface up - probably redundant, should be 'ip' instead.
    #try:
    #    subprocess.check_call(["ifconfig", profile['INTERFACE'], "up"])
    #except subprocess.CalledProcessError:
    #    print " - Could not bring interface up"
    #    return False

    # Manually set any iwconfig options - redundant, use custom wpa_supplicant config instead.
    #if profile.has_key('IWCONFIG'):
    #    subprocess.call(["iwconfig", profile['INTERFACE'], profile['IWCONFIG']])

    # Base arguments
    args=["wpa_supplicant", "-Bu", "-P/var/run/wpa_supplicant.pid"]
    
    try:
        args.append(profile['WPA_OPTS'])
    except KeyError:
        args.append("-Dwext")

    if profile['SECURITY'] == "wpa-config":
        try:
            args.append("-c" + profile["WPA_CONF"])
        except KeyError:
            args.append("-c/etc/wpa_supplicant.conf")
    elif not profile['SECURITY'] in ['wpa', 'wep', 'none']:
        print " - Invalid security chosen"
        return False

    # Start wpa_supplicant
    supplicant = subprocess.Popen(args,stderr=subprocess.STDOUT,stdout=subprocess.PIPE)
    output = supplicant.communicate()[0]
    if supplicant.returncode not in [255,0]:
        print output
        print " - Could not start wpa_supplicant"
        return False

    # Connect to wpa_supplicant
    bus = dbus.SystemBus()
    wpas_obj = bus.get_object(WPAS_DBUS_SERVICE, WPAS_DBUS_OPATH)
    wpas = dbus.Interface(wpas_obj, WPAS_DBUS_INTERFACE)
   
    # Add/Get interface path
    try:
        driver=profile["WPA_DRIVER"]
    except KeyError:
        driver="wext"

    try:
        path = wpas.getInterface(profile["INTERFACE"])
    except dbus.exceptions.DBusException:
        path = wpas.addInterface(profile["INTERFACE"], {"driver":dbus.String(driver,variant_level=1)})

    # Get interface object
    if_obj = bus.get_object(WPAS_DBUS_SERVICE, path)
    iface = dbus.Interface(if_obj, WPAS_DBUS_INTERFACES_INTERFACE);  
    
    # Add and select the network. Networks already specified for wpa-config
    if profile['SECURITY'] in ['wpa','wep','none']:
        
        path = iface.addNetwork()
        net_obj = bus.get_object(WPAS_DBUS_SERVICE, path)
        rnet = dbus.Interface(net_obj, WPAS_DBUS_NETWORKS_INTERFACE)
        iface.selectNetwork(rnet)


    if profile['SECURITY'] == "wpa":
        opts = dbus.Dictionary({"ssid": dbus.ByteArray(profile['ESSID']), 
                                "psk": dbus.String(profile['KEY'])}, 
                               signature="sv")
        rnet.set(opts)
    elif profile['SECURITY'] == "wep":
        key=profile['KEY']
        if key[:2] == "s:": # String key prefixed by "s:"
            key=key[2:]
        else: # Hex key
            key=wep_hex2dec(key)
        
        print key
        opts = dbus.Dictionary({"ssid": dbus.ByteArray(profile['ESSID']),
                                "key_mgmt": dbus.String("NONE"),
                                "wep_tx_keyidx": dbus.Int32(1),
                                "wep_key0": dbus.ByteArray(key)},
                               signature="sv")
        rnet.set(opts)
    elif profile['SECURITY'] == "none":
        opts = dbus.Dictionary({"ssid": dbus.ByteArray(profile['ESSID'])}, 
                               signature="sv")
        rnet.set(opts)
       
    # Determine timeout
    try:
        timeout = int(profile["TIMEOUT"])
    except KeyError:
        timeout = 15

    # Check for association
    n=0
    while n <= timeout:
        n+=1
        sleep(1)
        state = iface.state()
        if state == "COMPLETED":
            break
        
        if n == timeout:
            print " - Association/Authentication failed:", state
            return False

    # Run ethernet and get an ip.
    try:
        subprocess.check_call(["/usr/lib/network/connections/ethernet-iproute", "up", sys.argv[2]])
    except subprocess.CalledProcessError:
        return False
    return True
  
def stop(profile):
    subprocess.call(["/usr/lib/network/connections/ethernet", "down", sys.argv[2]])
    kill(int(open("/var/run/wpa_supplicant.pid").read()),SIGTERM)
    return True 

if __name__ == "__main__":
    profile = read_config("/etc/network.d/"+sys.argv[2])
 
    if sys.argv[1] == "up":
        sys.exit(not start(profile))
    elif sys.argv[1] == "down":
        sys.exit(not stop(profile))
